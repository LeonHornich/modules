nextflow_process {

    name "Test Process CRISPRCLEANR_NORMALIZE"
    script "../main.nf"
    process "CRISPRCLEANR_NORMALIZE"

    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "crisprcleanr"
    tag "crisprcleanr/normalize"


    test("homo_sapiens - [crispr_functional_counts, crispr_functional_library]") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['crispr_functional_counts'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['crispr_functional_library'], checkIfExists: true)
                ]
                input[1] = 30
                input[2] = 5
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out.norm_count_file).match("norm_count_file") },
                { assert snapshot(process.out.versions).match("versions") }
            )

        }

    }

    test("homo_sapiens - [crispr_functional_counts, crispr_functional_library] - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.test_data['homo_sapiens']['genome']['crispr_functional_counts'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['genome']['crispr_functional_library'], checkIfExists: true)
                ]
                input[1] = 30
                input[2] = 5
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )

        }

    }

}